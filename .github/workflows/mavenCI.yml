# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ${{matrix.os}}
    strategy:
      matrix:
       # os: [ubuntu-latest, windows-latest, maxOS-latest]
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Create JavaFX custom runtime image with JLink
      run: mvn -B javafx:jlink --file pom.xml
    - name: Create dir and copy aftifact
      run: mkdir staging && cp target/PassMaster3000.zip staging
      
    - name: Create a Release
      uses: elgohr/Github-Release-Action@v4
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        title: MyFirstCIRelease

        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        name: Package
        path: staging
    
   
